/*
 * generated by Xtext 2.30.0
 */
package org.xtext.openqasm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.openqasm.ide.contentassist.antlr.internal.InternalOpenQASM3Parser;
import org.xtext.openqasm.services.OpenQASM3GrammarAccess;

public class OpenQASM3Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(OpenQASM3GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, OpenQASM3GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getGateCallStatementAccess().getAlternatives_4(), "rule__GateCallStatement__Alternatives_4");
			builder.put(grammarAccess.getStatementOrScopeAccess().getAlternatives(), "rule__StatementOrScope__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives(), "rule__MultiplicativeOperator__Alternatives");
			builder.put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
			builder.put(grammarAccess.getFloatLiteralAccess().getAlternatives(), "rule__FloatLiteral__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getVersionAccess().getGroup(), "rule__Version__Group__0");
			builder.put(grammarAccess.getVersionAccess().getGroup_0(), "rule__Version__Group_0__0");
			builder.put(grammarAccess.getQuantumDeclarationStatementAccess().getGroup(), "rule__QuantumDeclarationStatement__Group__0");
			builder.put(grammarAccess.getGateCallStatementAccess().getGroup(), "rule__GateCallStatement__Group__0");
			builder.put(grammarAccess.getGateCallStatementAccess().getGroup_2(), "rule__GateCallStatement__Group_2__0");
			builder.put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
			builder.put(grammarAccess.getScopeAccess().getGroup(), "rule__Scope__Group__0");
			builder.put(grammarAccess.getExpressionListAccess().getGroup(), "rule__ExpressionList__Group__0");
			builder.put(grammarAccess.getExpressionListAccess().getGroup_1(), "rule__ExpressionList__Group_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_3(), "rule__MultiplicativeExpression__Group_3__0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
			builder.put(grammarAccess.getIndexOperatorAccess().getGroup(), "rule__IndexOperator__Group__0");
			builder.put(grammarAccess.getIndexOperatorAccess().getGroup_1(), "rule__IndexOperator__Group_1__0");
			builder.put(grammarAccess.getIndexOperatorAccess().getGroup_1_1(), "rule__IndexOperator__Group_1_1__0");
			builder.put(grammarAccess.getIndexedIdentifierAccess().getGroup(), "rule__IndexedIdentifier__Group__0");
			builder.put(grammarAccess.getGateOperandListAccess().getGroup(), "rule__GateOperandList__Group__0");
			builder.put(grammarAccess.getGateOperandListAccess().getGroup_1(), "rule__GateOperandList__Group_1__0");
			builder.put(grammarAccess.getQubitTypeAccess().getGroup(), "rule__QubitType__Group__0");
			builder.put(grammarAccess.getDesignatorAccess().getGroup(), "rule__Designator__Group__0");
			builder.put(grammarAccess.getFloatLiteralAccess().getGroup_0(), "rule__FloatLiteral__Group_0__0");
			builder.put(grammarAccess.getFloatLiteralAccess().getGroup_0_3(), "rule__FloatLiteral__Group_0_3__0");
			builder.put(grammarAccess.getFloatLiteralAccess().getGroup_0_3_2(), "rule__FloatLiteral__Group_0_3_2__0");
			builder.put(grammarAccess.getDecimalIntegerLiteralAccess().getGroup(), "rule__DecimalIntegerLiteral__Group__0");
			builder.put(grammarAccess.getIncludeStatementAccess().getGroup(), "rule__IncludeStatement__Group__0");
			builder.put(grammarAccess.getProgramAccess().getVersionAssignment_0(), "rule__Program__VersionAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getStatementsAssignment_1(), "rule__Program__StatementsAssignment_1");
			builder.put(grammarAccess.getVersionAccess().getVersionNumberAssignment_0_1(), "rule__Version__VersionNumberAssignment_0_1");
			builder.put(grammarAccess.getQuantumDeclarationStatementAccess().getNameAssignment_1(), "rule__QuantumDeclarationStatement__NameAssignment_1");
			builder.put(grammarAccess.getGateCallStatementAccess().getGateAssignment_1(), "rule__GateCallStatement__GateAssignment_1");
			builder.put(grammarAccess.getGateCallStatementAccess().getElAssignment_2_1(), "rule__GateCallStatement__ElAssignment_2_1");
			builder.put(grammarAccess.getGateCallStatementAccess().getGateListAssignment_3(), "rule__GateCallStatement__GateListAssignment_3");
			builder.put(grammarAccess.getGateCallStatementAccess().getScopeAssignment_4_0(), "rule__GateCallStatement__ScopeAssignment_4_0");
			builder.put(grammarAccess.getIfStatementAccess().getConditionAssignment_2(), "rule__IfStatement__ConditionAssignment_2");
			builder.put(grammarAccess.getIfStatementAccess().getIf_bodyAssignment_4(), "rule__IfStatement__If_bodyAssignment_4");
			builder.put(grammarAccess.getScopeAccess().getStatementsAssignment_2(), "rule__Scope__StatementsAssignment_2");
			builder.put(grammarAccess.getExpressionListAccess().getE1Assignment_0(), "rule__ExpressionList__E1Assignment_0");
			builder.put(grammarAccess.getExpressionListAccess().getE2Assignment_1_1(), "rule__ExpressionList__E2Assignment_1_1");
			builder.put(grammarAccess.getExpressionAccess().getExprsAssignment_0_1(), "rule__Expression__ExprsAssignment_0_1");
			builder.put(grammarAccess.getExpressionAccess().getLtrsAssignment_1(), "rule__Expression__LtrsAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getUnExpressionsAssignment_2(), "rule__Expression__UnExpressionsAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getMultExpressionsAssignment_3(), "rule__Expression__MultExpressionsAssignment_3");
			builder.put(grammarAccess.getLiteralAccess().getLAssignment_0(), "rule__Literal__LAssignment_0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getL1Assignment_0(), "rule__MultiplicativeExpression__L1Assignment_0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getL1Assignment_2(), "rule__MultiplicativeExpression__L1Assignment_2");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getL1Assignment_3_1(), "rule__MultiplicativeExpression__L1Assignment_3_1");
			builder.put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0(), "rule__UnaryExpression__OpAssignment_0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getLAssignment_1(), "rule__UnaryExpression__LAssignment_1");
			builder.put(grammarAccess.getIndexOperatorAccess().getEAssignment_1_1_1(), "rule__IndexOperator__EAssignment_1_1_1");
			builder.put(grammarAccess.getIndexedIdentifierAccess().getGateNameAssignment_0(), "rule__IndexedIdentifier__GateNameAssignment_0");
			builder.put(grammarAccess.getIndexedIdentifierAccess().getIoAssignment_1(), "rule__IndexedIdentifier__IoAssignment_1");
			builder.put(grammarAccess.getGateOperandListAccess().getExtraGOAssignment_1_1(), "rule__GateOperandList__ExtraGOAssignment_1_1");
			builder.put(grammarAccess.getQubitTypeAccess().getDAssignment_1(), "rule__QubitType__DAssignment_1");
			builder.put(grammarAccess.getDesignatorAccess().getEAssignment_2(), "rule__Designator__EAssignment_2");
			builder.put(grammarAccess.getIncludeStatementAccess().getLibNameAssignment_1(), "rule__IncludeStatement__LibNameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private OpenQASM3GrammarAccess grammarAccess;

	@Override
	protected InternalOpenQASM3Parser createParser() {
		InternalOpenQASM3Parser result = new InternalOpenQASM3Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OpenQASM3GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OpenQASM3GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
