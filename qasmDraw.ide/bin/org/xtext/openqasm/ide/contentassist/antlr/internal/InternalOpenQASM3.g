/*
 * generated by Xtext 2.30.0
 */
grammar InternalOpenQASM3;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.openqasm.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.openqasm.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.openqasm.services.OpenQASM3GrammarAccess;

}
@parser::members {
	private OpenQASM3GrammarAccess grammarAccess;

	public void setGrammarAccess(OpenQASM3GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVersion
entryRuleVersion
:
{ before(grammarAccess.getVersionRule()); }
	 ruleVersion
{ after(grammarAccess.getVersionRule()); } 
	 EOF 
;

// Rule Version
ruleVersion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVersionAccess().getGroup()); }
		(rule__Version__Group__0)
		{ after(grammarAccess.getVersionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulequantumDeclarationStatement
entryRulequantumDeclarationStatement
:
{ before(grammarAccess.getQuantumDeclarationStatementRule()); }
	 rulequantumDeclarationStatement
{ after(grammarAccess.getQuantumDeclarationStatementRule()); } 
	 EOF 
;

// Rule quantumDeclarationStatement
rulequantumDeclarationStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantumDeclarationStatementAccess().getGroup()); }
		(rule__QuantumDeclarationStatement__Group__0)
		{ after(grammarAccess.getQuantumDeclarationStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGateCallStatement
entryRuleGateCallStatement
:
{ before(grammarAccess.getGateCallStatementRule()); }
	 ruleGateCallStatement
{ after(grammarAccess.getGateCallStatementRule()); } 
	 EOF 
;

// Rule GateCallStatement
ruleGateCallStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGateCallStatementAccess().getGroup()); }
		(rule__GateCallStatement__Group__0)
		{ after(grammarAccess.getGateCallStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestatementOrScope
entryRulestatementOrScope
:
{ before(grammarAccess.getStatementOrScopeRule()); }
	 rulestatementOrScope
{ after(grammarAccess.getStatementOrScopeRule()); } 
	 EOF 
;

// Rule statementOrScope
rulestatementOrScope 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementOrScopeAccess().getAlternatives()); }
		(rule__StatementOrScope__Alternatives)
		{ after(grammarAccess.getStatementOrScopeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScope
entryRuleScope
:
{ before(grammarAccess.getScopeRule()); }
	 ruleScope
{ after(grammarAccess.getScopeRule()); } 
	 EOF 
;

// Rule Scope
ruleScope 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScopeAccess().getGroup()); }
		(rule__Scope__Group__0)
		{ after(grammarAccess.getScopeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionList
entryRuleExpressionList
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleExpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionListAccess().getGroup()); }
		(rule__ExpressionList__Group__0)
		{ after(grammarAccess.getExpressionListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator
:
{ before(grammarAccess.getMultiplicativeOperatorRule()); }
	 ruleMultiplicativeOperator
{ after(grammarAccess.getMultiplicativeOperatorRule()); } 
	 EOF 
;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
		(rule__MultiplicativeOperator__Alternatives)
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
		(rule__UnaryExpression__Group__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
		(rule__UnaryOperator__Alternatives)
		{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndexOperator
entryRuleIndexOperator
:
{ before(grammarAccess.getIndexOperatorRule()); }
	 ruleIndexOperator
{ after(grammarAccess.getIndexOperatorRule()); } 
	 EOF 
;

// Rule IndexOperator
ruleIndexOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexOperatorAccess().getGroup()); }
		(rule__IndexOperator__Group__0)
		{ after(grammarAccess.getIndexOperatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIndexedIdentifier
entryRuleIndexedIdentifier
:
{ before(grammarAccess.getIndexedIdentifierRule()); }
	 ruleIndexedIdentifier
{ after(grammarAccess.getIndexedIdentifierRule()); } 
	 EOF 
;

// Rule IndexedIdentifier
ruleIndexedIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexedIdentifierAccess().getGroup()); }
		(rule__IndexedIdentifier__Group__0)
		{ after(grammarAccess.getIndexedIdentifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGateOperand
entryRuleGateOperand
:
{ before(grammarAccess.getGateOperandRule()); }
	 ruleGateOperand
{ after(grammarAccess.getGateOperandRule()); } 
	 EOF 
;

// Rule GateOperand
ruleGateOperand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGateOperandAccess().getIndexedIdentifierParserRuleCall()); }
		ruleIndexedIdentifier
		{ after(grammarAccess.getGateOperandAccess().getIndexedIdentifierParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGateOperandList
entryRuleGateOperandList
:
{ before(grammarAccess.getGateOperandListRule()); }
	 ruleGateOperandList
{ after(grammarAccess.getGateOperandListRule()); } 
	 EOF 
;

// Rule GateOperandList
ruleGateOperandList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGateOperandListAccess().getGroup()); }
		(rule__GateOperandList__Group__0)
		{ after(grammarAccess.getGateOperandListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQubitType
entryRuleQubitType
:
{ before(grammarAccess.getQubitTypeRule()); }
	 ruleQubitType
{ after(grammarAccess.getQubitTypeRule()); } 
	 EOF 
;

// Rule QubitType
ruleQubitType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQubitTypeAccess().getGroup()); }
		(rule__QubitType__Group__0)
		{ after(grammarAccess.getQubitTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDesignator
entryRuleDesignator
:
{ before(grammarAccess.getDesignatorRule()); }
	 ruleDesignator
{ after(grammarAccess.getDesignatorRule()); } 
	 EOF 
;

// Rule Designator
ruleDesignator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDesignatorAccess().getGroup()); }
		(rule__Designator__Group__0)
		{ after(grammarAccess.getDesignatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral
:
{ before(grammarAccess.getFloatLiteralRule()); }
	 ruleFloatLiteral
{ after(grammarAccess.getFloatLiteralRule()); } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatLiteralAccess().getAlternatives()); }
		(rule__FloatLiteral__Alternatives)
		{ after(grammarAccess.getFloatLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecimalIntegerLiteral
entryRuleDecimalIntegerLiteral
:
{ before(grammarAccess.getDecimalIntegerLiteralRule()); }
	 ruleDecimalIntegerLiteral
{ after(grammarAccess.getDecimalIntegerLiteralRule()); } 
	 EOF 
;

// Rule DecimalIntegerLiteral
ruleDecimalIntegerLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecimalIntegerLiteralAccess().getGroup()); }
		(rule__DecimalIntegerLiteral__Group__0)
		{ after(grammarAccess.getDecimalIntegerLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIncludeStatement
entryRuleIncludeStatement
:
{ before(grammarAccess.getIncludeStatementRule()); }
	 ruleIncludeStatement
{ after(grammarAccess.getIncludeStatementRule()); } 
	 EOF 
;

// Rule IncludeStatement
ruleIncludeStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncludeStatementAccess().getGroup()); }
		(rule__IncludeStatement__Group__0)
		{ after(grammarAccess.getIncludeStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getIncludeStatementParserRuleCall_0()); }
		ruleIncludeStatement
		{ after(grammarAccess.getStatementAccess().getIncludeStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getQuantumDeclarationStatementParserRuleCall_1()); }
		rulequantumDeclarationStatement
		{ after(grammarAccess.getStatementAccess().getQuantumDeclarationStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGateCallStatementParserRuleCall_2()); }
		ruleGateCallStatement
		{ after(grammarAccess.getStatementAccess().getGateCallStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3()); }
		ruleIfStatement
		{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGateCallStatementAccess().getScopeAssignment_4_0()); }
		(rule__GateCallStatement__ScopeAssignment_4_0)
		{ after(grammarAccess.getGateCallStatementAccess().getScopeAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getGateCallStatementAccess().getSEMICOLONTerminalRuleCall_4_1()); }
		RULE_SEMICOLON
		{ after(grammarAccess.getGateCallStatementAccess().getSEMICOLONTerminalRuleCall_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementOrScope__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementOrScopeAccess().getStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getStatementOrScopeAccess().getStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementOrScopeAccess().getScopeParserRuleCall_1()); }
		ruleScope
		{ after(grammarAccess.getStatementOrScopeAccess().getScopeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_0()); }
		(rule__Expression__Group_0__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getLtrsAssignment_1()); }
		(rule__Expression__LtrsAssignment_1)
		{ after(grammarAccess.getExpressionAccess().getLtrsAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getUnExpressionsAssignment_2()); }
		(rule__Expression__UnExpressionsAssignment_2)
		{ after(grammarAccess.getExpressionAccess().getUnExpressionsAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getMultExpressionsAssignment_3()); }
		(rule__Expression__MultExpressionsAssignment_3)
		{ after(grammarAccess.getExpressionAccess().getMultExpressionsAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getLAssignment_0()); }
		(rule__Literal__LAssignment_0)
		{ after(grammarAccess.getLiteralAccess().getLAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_1()); }
		(rule__Literal__Group_1__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_2()); }
		(rule__Literal__Group_2__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getASTERISKTerminalRuleCall_0()); }
		RULE_ASTERISK
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getASTERISKTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeOperatorAccess().getSLASHTerminalRuleCall_1()); }
		RULE_SLASH
		{ after(grammarAccess.getMultiplicativeOperatorAccess().getSLASHTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getTILDETerminalRuleCall_0()); }
		RULE_TILDE
		{ after(grammarAccess.getUnaryOperatorAccess().getTILDETerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getEXCLAMATION_POINTTerminalRuleCall_1()); }
		RULE_EXCLAMATION_POINT
		{ after(grammarAccess.getUnaryOperatorAccess().getEXCLAMATION_POINTTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFloatLiteralAccess().getGroup_0()); }
		(rule__FloatLiteral__Group_0__0)
		{ after(grammarAccess.getFloatLiteralAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFloatLiteralAccess().getPiKeyword_1()); }
		'pi'
		{ after(grammarAccess.getFloatLiteralAccess().getPiKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getVersionAssignment_0()); }
	(rule__Program__VersionAssignment_0)?
	{ after(grammarAccess.getProgramAccess().getVersionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getStatementsAssignment_1()); }
	(rule__Program__StatementsAssignment_1)*
	{ after(grammarAccess.getProgramAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group__0__Impl
	rule__Version__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getGroup_0()); }
	(rule__Version__Group_0__0)
	{ after(grammarAccess.getVersionAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getSEMICOLONTerminalRuleCall_1()); }
	RULE_SEMICOLON
	{ after(grammarAccess.getVersionAccess().getSEMICOLONTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Version__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group_0__0__Impl
	rule__Version__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getOPENQASMKeyword_0_0()); }
	'OPENQASM'
	{ after(grammarAccess.getVersionAccess().getOPENQASMKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Version__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVersionAccess().getVersionNumberAssignment_0_1()); }
	(rule__Version__VersionNumberAssignment_0_1)
	{ after(grammarAccess.getVersionAccess().getVersionNumberAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QuantumDeclarationStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QuantumDeclarationStatement__Group__0__Impl
	rule__QuantumDeclarationStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantumDeclarationStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantumDeclarationStatementAccess().getQubitTypeParserRuleCall_0()); }
	ruleQubitType
	{ after(grammarAccess.getQuantumDeclarationStatementAccess().getQubitTypeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantumDeclarationStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QuantumDeclarationStatement__Group__1__Impl
	rule__QuantumDeclarationStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantumDeclarationStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantumDeclarationStatementAccess().getNameAssignment_1()); }
	(rule__QuantumDeclarationStatement__NameAssignment_1)
	{ after(grammarAccess.getQuantumDeclarationStatementAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantumDeclarationStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QuantumDeclarationStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantumDeclarationStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantumDeclarationStatementAccess().getSEMICOLONTerminalRuleCall_2()); }
	RULE_SEMICOLON
	{ after(grammarAccess.getQuantumDeclarationStatementAccess().getSEMICOLONTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GateCallStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateCallStatement__Group__0__Impl
	rule__GateCallStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateCallStatementAccess().getGateKeyword_0()); }
	('gate')?
	{ after(grammarAccess.getGateCallStatementAccess().getGateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateCallStatement__Group__1__Impl
	rule__GateCallStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateCallStatementAccess().getGateAssignment_1()); }
	(rule__GateCallStatement__GateAssignment_1)
	{ after(grammarAccess.getGateCallStatementAccess().getGateAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateCallStatement__Group__2__Impl
	rule__GateCallStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateCallStatementAccess().getGroup_2()); }
	(rule__GateCallStatement__Group_2__0)?
	{ after(grammarAccess.getGateCallStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateCallStatement__Group__3__Impl
	rule__GateCallStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateCallStatementAccess().getGateListAssignment_3()); }
	(rule__GateCallStatement__GateListAssignment_3)
	{ after(grammarAccess.getGateCallStatementAccess().getGateListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateCallStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateCallStatementAccess().getAlternatives_4()); }
	(rule__GateCallStatement__Alternatives_4)
	{ after(grammarAccess.getGateCallStatementAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GateCallStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateCallStatement__Group_2__0__Impl
	rule__GateCallStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateCallStatementAccess().getLPARENTerminalRuleCall_2_0()); }
	RULE_LPAREN
	{ after(grammarAccess.getGateCallStatementAccess().getLPARENTerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateCallStatement__Group_2__1__Impl
	rule__GateCallStatement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateCallStatementAccess().getElAssignment_2_1()); }
	(rule__GateCallStatement__ElAssignment_2_1)?
	{ after(grammarAccess.getGateCallStatementAccess().getElAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateCallStatement__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateCallStatementAccess().getRPARENTerminalRuleCall_2_2()); }
	RULE_RPAREN
	{ after(grammarAccess.getGateCallStatementAccess().getRPARENTerminalRuleCall_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getLPARENTerminalRuleCall_1()); }
	RULE_LPAREN
	{ after(grammarAccess.getIfStatementAccess().getLPARENTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
	(rule__IfStatement__ConditionAssignment_2)
	{ after(grammarAccess.getIfStatementAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getRPARENTerminalRuleCall_3()); }
	RULE_RPAREN
	{ after(grammarAccess.getIfStatementAccess().getRPARENTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getIf_bodyAssignment_4()); }
	(rule__IfStatement__If_bodyAssignment_4)
	{ after(grammarAccess.getIfStatementAccess().getIf_bodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group__0__Impl
	rule__Scope__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getScopeAction_0()); }
	()
	{ after(grammarAccess.getScopeAccess().getScopeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group__1__Impl
	rule__Scope__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getLBRACETerminalRuleCall_1()); }
	RULE_LBRACE
	{ after(grammarAccess.getScopeAccess().getLBRACETerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group__2__Impl
	rule__Scope__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getStatementsAssignment_2()); }
	(rule__Scope__StatementsAssignment_2)*
	{ after(grammarAccess.getScopeAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getRBRACETerminalRuleCall_3()); }
	RULE_RBRACE
	{ after(grammarAccess.getScopeAccess().getRBRACETerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getE1Assignment_0()); }
	(rule__ExpressionList__E1Assignment_0)
	{ after(grammarAccess.getExpressionListAccess().getE1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group__1__Impl
	rule__ExpressionList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
	(rule__ExpressionList__Group_1__0)*
	{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getCOMMATerminalRuleCall_2()); }
	(RULE_COMMA)?
	{ after(grammarAccess.getExpressionListAccess().getCOMMATerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getCOMMATerminalRuleCall_1_0()); }
	RULE_COMMA
	{ after(grammarAccess.getExpressionListAccess().getCOMMATerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getE2Assignment_1_1()); }
	(rule__ExpressionList__E2Assignment_1_1)
	{ after(grammarAccess.getExpressionListAccess().getE2Assignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_0__0__Impl
	rule__Expression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLPARENTerminalRuleCall_0_0()); }
	RULE_LPAREN
	{ after(grammarAccess.getExpressionAccess().getLPARENTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_0__1__Impl
	rule__Expression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getExprsAssignment_0_1()); }
	(rule__Expression__ExprsAssignment_0_1)
	{ after(grammarAccess.getExpressionAccess().getExprsAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRPARENTerminalRuleCall_0_2()); }
	RULE_RPAREN
	{ after(grammarAccess.getExpressionAccess().getRPARENTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_1__0__Impl
	rule__Literal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getLiteralAccess().getLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1_1()); }
	RULE_STRING
	{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_2__0__Impl
	rule__Literal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getLiteralAccess().getLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getDecimalIntegerLiteralParserRuleCall_2_1()); }
	ruleDecimalIntegerLiteral
	{ after(grammarAccess.getLiteralAccess().getDecimalIntegerLiteralParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getL1Assignment_0()); }
	(rule__MultiplicativeExpression__L1Assignment_0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getL1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
	rule__MultiplicativeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeOperatorParserRuleCall_1()); }
	ruleMultiplicativeOperator
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeOperatorParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__2__Impl
	rule__MultiplicativeExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getL1Assignment_2()); }
	(rule__MultiplicativeExpression__L1Assignment_2)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getL1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_3()); }
	(rule__MultiplicativeExpression__Group_3__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_3__0__Impl
	rule__MultiplicativeExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeOperatorParserRuleCall_3_0()); }
	ruleMultiplicativeOperator
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeOperatorParserRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getL1Assignment_3_1()); }
	(rule__MultiplicativeExpression__L1Assignment_3_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getL1Assignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
	(rule__UnaryExpression__OpAssignment_0)
	{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getLAssignment_1()); }
	(rule__UnaryExpression__LAssignment_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getLAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IndexOperator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOperator__Group__0__Impl
	rule__IndexOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOperatorAccess().getLBRACKETTerminalRuleCall_0()); }
	RULE_LBRACKET
	{ after(grammarAccess.getIndexOperatorAccess().getLBRACKETTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOperator__Group__1__Impl
	rule__IndexOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOperatorAccess().getGroup_1()); }
	(rule__IndexOperator__Group_1__0)
	{ after(grammarAccess.getIndexOperatorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOperator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOperatorAccess().getRBRACKETTerminalRuleCall_2()); }
	RULE_RBRACKET
	{ after(grammarAccess.getIndexOperatorAccess().getRBRACKETTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IndexOperator__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOperator__Group_1__0__Impl
	rule__IndexOperator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOperatorAccess().getExpressionParserRuleCall_1_0()); }
	ruleExpression
	{ after(grammarAccess.getIndexOperatorAccess().getExpressionParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOperator__Group_1__1__Impl
	rule__IndexOperator__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOperatorAccess().getGroup_1_1()); }
	(rule__IndexOperator__Group_1_1__0)*
	{ after(grammarAccess.getIndexOperatorAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOperator__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOperatorAccess().getCOMMATerminalRuleCall_1_2()); }
	(RULE_COMMA)?
	{ after(grammarAccess.getIndexOperatorAccess().getCOMMATerminalRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IndexOperator__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOperator__Group_1_1__0__Impl
	rule__IndexOperator__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOperatorAccess().getCOMMATerminalRuleCall_1_1_0()); }
	RULE_COMMA
	{ after(grammarAccess.getIndexOperatorAccess().getCOMMATerminalRuleCall_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexOperator__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexOperatorAccess().getEAssignment_1_1_1()); }
	(rule__IndexOperator__EAssignment_1_1_1)
	{ after(grammarAccess.getIndexOperatorAccess().getEAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IndexedIdentifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexedIdentifier__Group__0__Impl
	rule__IndexedIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedIdentifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedIdentifierAccess().getGateNameAssignment_0()); }
	(rule__IndexedIdentifier__GateNameAssignment_0)
	{ after(grammarAccess.getIndexedIdentifierAccess().getGateNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedIdentifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IndexedIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedIdentifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexedIdentifierAccess().getIoAssignment_1()); }
	(rule__IndexedIdentifier__IoAssignment_1)*
	{ after(grammarAccess.getIndexedIdentifierAccess().getIoAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GateOperandList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateOperandList__Group__0__Impl
	rule__GateOperandList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GateOperandList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateOperandListAccess().getGateOperandParserRuleCall_0()); }
	ruleGateOperand
	{ after(grammarAccess.getGateOperandListAccess().getGateOperandParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateOperandList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateOperandList__Group__1__Impl
	rule__GateOperandList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GateOperandList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateOperandListAccess().getGroup_1()); }
	(rule__GateOperandList__Group_1__0)*
	{ after(grammarAccess.getGateOperandListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateOperandList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateOperandList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GateOperandList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateOperandListAccess().getCOMMATerminalRuleCall_2()); }
	(RULE_COMMA)?
	{ after(grammarAccess.getGateOperandListAccess().getCOMMATerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GateOperandList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateOperandList__Group_1__0__Impl
	rule__GateOperandList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GateOperandList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateOperandListAccess().getCOMMATerminalRuleCall_1_0()); }
	RULE_COMMA
	{ after(grammarAccess.getGateOperandListAccess().getCOMMATerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateOperandList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GateOperandList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GateOperandList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGateOperandListAccess().getExtraGOAssignment_1_1()); }
	(rule__GateOperandList__ExtraGOAssignment_1_1)
	{ after(grammarAccess.getGateOperandListAccess().getExtraGOAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QubitType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QubitType__Group__0__Impl
	rule__QubitType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QubitType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQubitTypeAccess().getQUBITTerminalRuleCall_0()); }
	RULE_QUBIT
	{ after(grammarAccess.getQubitTypeAccess().getQUBITTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QubitType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QubitType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QubitType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQubitTypeAccess().getDAssignment_1()); }
	(rule__QubitType__DAssignment_1)
	{ after(grammarAccess.getQubitTypeAccess().getDAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Designator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Designator__Group__0__Impl
	rule__Designator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDesignatorAccess().getDesignatorAction_0()); }
	()
	{ after(grammarAccess.getDesignatorAccess().getDesignatorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Designator__Group__1__Impl
	rule__Designator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDesignatorAccess().getLBRACKETTerminalRuleCall_1()); }
	RULE_LBRACKET
	{ after(grammarAccess.getDesignatorAccess().getLBRACKETTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Designator__Group__2__Impl
	rule__Designator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDesignatorAccess().getEAssignment_2()); }
	(rule__Designator__EAssignment_2)?
	{ after(grammarAccess.getDesignatorAccess().getEAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Designator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDesignatorAccess().getRBRACKETTerminalRuleCall_3()); }
	RULE_RBRACKET
	{ after(grammarAccess.getDesignatorAccess().getRBRACKETTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLiteral__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group_0__0__Impl
	rule__FloatLiteral__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_0()); }
	ruleDecimalIntegerLiteral
	{ after(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group_0__1__Impl
	rule__FloatLiteral__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getDOTTerminalRuleCall_0_1()); }
	RULE_DOT
	{ after(grammarAccess.getFloatLiteralAccess().getDOTTerminalRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group_0__2__Impl
	rule__FloatLiteral__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_2()); }
	(ruleDecimalIntegerLiteral)?
	{ after(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getGroup_0_3()); }
	(rule__FloatLiteral__Group_0_3__0)?
	{ after(grammarAccess.getFloatLiteralAccess().getGroup_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLiteral__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group_0_3__0__Impl
	rule__FloatLiteral__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getEKeyword_0_3_0()); }
	'e'
	{ after(grammarAccess.getFloatLiteralAccess().getEKeyword_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group_0_3__1__Impl
	rule__FloatLiteral__Group_0_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_3_1()); }
	ruleDecimalIntegerLiteral
	{ after(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group_0_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getGroup_0_3_2()); }
	(rule__FloatLiteral__Group_0_3_2__0)?
	{ after(grammarAccess.getFloatLiteralAccess().getGroup_0_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLiteral__Group_0_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group_0_3_2__0__Impl
	rule__FloatLiteral__Group_0_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getDOTTerminalRuleCall_0_3_2_0()); }
	RULE_DOT
	{ after(grammarAccess.getFloatLiteralAccess().getDOTTerminalRuleCall_0_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatLiteral__Group_0_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group_0_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_3_2_1()); }
	ruleDecimalIntegerLiteral
	{ after(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalIntegerLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalIntegerLiteral__Group__0__Impl
	rule__DecimalIntegerLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalIntegerLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalIntegerLiteralAccess().getMINUSTerminalRuleCall_0()); }
	(RULE_MINUS)?
	{ after(grammarAccess.getDecimalIntegerLiteralAccess().getMINUSTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalIntegerLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecimalIntegerLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalIntegerLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecimalIntegerLiteralAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getDecimalIntegerLiteralAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IncludeStatement__Group__0__Impl
	rule__IncludeStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeStatementAccess().getIncludeKeyword_0()); }
	'include'
	{ after(grammarAccess.getIncludeStatementAccess().getIncludeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IncludeStatement__Group__1__Impl
	rule__IncludeStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeStatementAccess().getLibNameAssignment_1()); }
	(rule__IncludeStatement__LibNameAssignment_1)
	{ after(grammarAccess.getIncludeStatementAccess().getLibNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IncludeStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeStatementAccess().getSEMICOLONTerminalRuleCall_2()); }
	RULE_SEMICOLON
	{ after(grammarAccess.getIncludeStatementAccess().getSEMICOLONTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__VersionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getVersionVersionParserRuleCall_0_0()); }
		ruleVersion
		{ after(grammarAccess.getProgramAccess().getVersionVersionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Version__VersionNumberAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVersionAccess().getVersionNumberFloatLiteralParserRuleCall_0_1_0()); }
		ruleFloatLiteral
		{ after(grammarAccess.getVersionAccess().getVersionNumberFloatLiteralParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantumDeclarationStatement__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantumDeclarationStatementAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getQuantumDeclarationStatementAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__GateAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGateCallStatementAccess().getGateIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGateCallStatementAccess().getGateIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__ElAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGateCallStatementAccess().getElExpressionListParserRuleCall_2_1_0()); }
		ruleExpressionList
		{ after(grammarAccess.getGateCallStatementAccess().getElExpressionListParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__GateListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGateCallStatementAccess().getGateListGateOperandListParserRuleCall_3_0()); }
		ruleGateOperandList
		{ after(grammarAccess.getGateCallStatementAccess().getGateListGateOperandListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateCallStatement__ScopeAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGateCallStatementAccess().getScopeScopeParserRuleCall_4_0_0()); }
		ruleScope
		{ after(grammarAccess.getGateCallStatementAccess().getScopeScopeParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__If_bodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getIf_bodyStatementOrScopeParserRuleCall_4_0()); }
		rulestatementOrScope
		{ after(grammarAccess.getIfStatementAccess().getIf_bodyStatementOrScopeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScopeAccess().getStatementsStatementParserRuleCall_2_0()); }
		ruleStatement
		{ after(grammarAccess.getScopeAccess().getStatementsStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__E1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionListAccess().getE1ExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionListAccess().getE1ExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__E2Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionListAccess().getE2ExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionListAccess().getE2ExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExprsAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getExprsExpressionParserRuleCall_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionAccess().getExprsExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LtrsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getLtrsLiteralParserRuleCall_1_0()); }
		ruleLiteral
		{ after(grammarAccess.getExpressionAccess().getLtrsLiteralParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__UnExpressionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getUnExpressionsUnaryExpressionParserRuleCall_2_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getExpressionAccess().getUnExpressionsUnaryExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__MultExpressionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getMultExpressionsMultiplicativeExpressionParserRuleCall_3_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getExpressionAccess().getMultExpressionsMultiplicativeExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__LAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getLFloatLiteralParserRuleCall_0_0()); }
		ruleFloatLiteral
		{ after(grammarAccess.getLiteralAccess().getLFloatLiteralParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__L1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getL1LiteralParserRuleCall_0_0()); }
		ruleLiteral
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getL1LiteralParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__L1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getL1LiteralParserRuleCall_2_0()); }
		ruleLiteral
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getL1LiteralParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__L1Assignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getL1LiteralParserRuleCall_3_1_0()); }
		ruleLiteral
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getL1LiteralParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
		ruleUnaryOperator
		{ after(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__LAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getLLiteralParserRuleCall_1_0()); }
		ruleLiteral
		{ after(grammarAccess.getUnaryExpressionAccess().getLLiteralParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexOperator__EAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexOperatorAccess().getEExpressionParserRuleCall_1_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIndexOperatorAccess().getEExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedIdentifier__GateNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexedIdentifierAccess().getGateNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getIndexedIdentifierAccess().getGateNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedIdentifier__IoAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIndexedIdentifierAccess().getIoIndexOperatorParserRuleCall_1_0()); }
		ruleIndexOperator
		{ after(grammarAccess.getIndexedIdentifierAccess().getIoIndexOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GateOperandList__ExtraGOAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGateOperandListAccess().getExtraGOGateOperandParserRuleCall_1_1_0()); }
		ruleGateOperand
		{ after(grammarAccess.getGateOperandListAccess().getExtraGOGateOperandParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__QubitType__DAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQubitTypeAccess().getDDesignatorParserRuleCall_1_0()); }
		ruleDesignator
		{ after(grammarAccess.getQubitTypeAccess().getDDesignatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__EAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDesignatorAccess().getEExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getDesignatorAccess().getEExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeStatement__LibNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncludeStatementAccess().getLibNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getIncludeStatementAccess().getLibNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ELSE : 'else';

RULE_MINUS : '-';

RULE_EXCLAMATION_POINT : '!';

RULE_TILDE : '~';

RULE_PERCENT : '%';

RULE_SLASH : '/';

RULE_ASTERISK : '*';

RULE_DOT : '.';

RULE_COMMA : ',';

RULE_BIT : 'bit';

RULE_FLOAT : 'float';

RULE_ANGLE : 'angle';

RULE_BOOL : 'bool';

RULE_DURATION : 'duration';

RULE_STRETCH : 'stretch';

RULE_COMPLEX : 'complex';

RULE_ARRAY : 'array';

RULE_QUBIT : 'qubit';

RULE_LBRACKET : '[';

RULE_RBRACKET : ']';

RULE_SEMICOLON : ';';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_LBRACE : '{';

RULE_RBRACE : '}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
