/*
 * generated by Xtext 2.30.0
 */
grammar InternalOpenQASM3;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.openqasm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.openqasm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.openqasm.services.OpenQASM3GrammarAccess;

}

@parser::members {

 	private OpenQASM3GrammarAccess grammarAccess;

    public InternalOpenQASM3Parser(TokenStream input, OpenQASM3GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected OpenQASM3GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getVersionVersionParserRuleCall_0_0());
				}
				lv_version_0_0=ruleVersion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"version",
						lv_version_0_0,
						"org.xtext.openqasm.OpenQASM3.Version");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"org.xtext.openqasm.OpenQASM3.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVersionRule()); }
	iv_ruleVersion=ruleVersion
	{ $current=$iv_ruleVersion.current; }
	EOF;

// Rule Version
ruleVersion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='OPENQASM'
			{
				newLeafNode(otherlv_0, grammarAccess.getVersionAccess().getOPENQASMKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVersionAccess().getVersionNumberFloatLiteralParserRuleCall_0_1_0());
					}
					lv_versionNumber_1_0=ruleFloatLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVersionRule());
						}
						set(
							$current,
							"versionNumber",
							lv_versionNumber_1_0,
							"org.xtext.openqasm.OpenQASM3.FloatLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		this_SEMICOLON_2=RULE_SEMICOLON
		{
			newLeafNode(this_SEMICOLON_2, grammarAccess.getVersionAccess().getSEMICOLONTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIncludeStatementParserRuleCall_0());
		}
		this_IncludeStatement_0=ruleIncludeStatement
		{
			$current = $this_IncludeStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getQuantumDeclarationStatementParserRuleCall_1());
		}
		this_quantumDeclarationStatement_1=rulequantumDeclarationStatement
		{
			$current = $this_quantumDeclarationStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getGateCallStatementParserRuleCall_2());
		}
		this_GateCallStatement_2=ruleGateCallStatement
		{
			$current = $this_GateCallStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_3());
		}
		this_IfStatement_3=ruleIfStatement
		{
			$current = $this_IfStatement_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulequantumDeclarationStatement
entryRulequantumDeclarationStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantumDeclarationStatementRule()); }
	iv_rulequantumDeclarationStatement=rulequantumDeclarationStatement
	{ $current=$iv_rulequantumDeclarationStatement.current; }
	EOF;

// Rule quantumDeclarationStatement
rulequantumDeclarationStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQuantumDeclarationStatementAccess().getQubitTypeParserRuleCall_0());
		}
		this_QubitType_0=ruleQubitType
		{
			$current = $this_QubitType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getQuantumDeclarationStatementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuantumDeclarationStatementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		this_SEMICOLON_2=RULE_SEMICOLON
		{
			newLeafNode(this_SEMICOLON_2, grammarAccess.getQuantumDeclarationStatementAccess().getSEMICOLONTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleGateCallStatement
entryRuleGateCallStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGateCallStatementRule()); }
	iv_ruleGateCallStatement=ruleGateCallStatement
	{ $current=$iv_ruleGateCallStatement.current; }
	EOF;

// Rule GateCallStatement
ruleGateCallStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='gate'
			{
				newLeafNode(otherlv_0, grammarAccess.getGateCallStatementAccess().getGateKeyword_0());
			}
		)?
		(
			(
				lv_gate_1_0=RULE_ID
				{
					newLeafNode(lv_gate_1_0, grammarAccess.getGateCallStatementAccess().getGateIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGateCallStatementRule());
					}
					setWithLastConsumed(
						$current,
						"gate",
						lv_gate_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			this_LPAREN_2=RULE_LPAREN
			{
				newLeafNode(this_LPAREN_2, grammarAccess.getGateCallStatementAccess().getLPARENTerminalRuleCall_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGateCallStatementAccess().getElExpressionListParserRuleCall_2_1_0());
					}
					lv_el_3_0=ruleExpressionList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGateCallStatementRule());
						}
						set(
							$current,
							"el",
							lv_el_3_0,
							"org.xtext.openqasm.OpenQASM3.ExpressionList");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			this_RPAREN_4=RULE_RPAREN
			{
				newLeafNode(this_RPAREN_4, grammarAccess.getGateCallStatementAccess().getRPARENTerminalRuleCall_2_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getGateCallStatementAccess().getGateListGateOperandListParserRuleCall_3_0());
				}
				lv_gateList_5_0=ruleGateOperandList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGateCallStatementRule());
					}
					set(
						$current,
						"gateList",
						lv_gateList_5_0,
						"org.xtext.openqasm.OpenQASM3.GateOperandList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGateCallStatementAccess().getScopeScopeParserRuleCall_4_0_0());
					}
					lv_scope_6_0=ruleScope
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGateCallStatementRule());
						}
						set(
							$current,
							"scope",
							lv_scope_6_0,
							"org.xtext.openqasm.OpenQASM3.Scope");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			this_SEMICOLON_7=RULE_SEMICOLON
			{
				newLeafNode(this_SEMICOLON_7, grammarAccess.getGateCallStatementAccess().getSEMICOLONTerminalRuleCall_4_1());
			}
		)
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
		}
		this_LPAREN_1=RULE_LPAREN
		{
			newLeafNode(this_LPAREN_1, grammarAccess.getIfStatementAccess().getLPARENTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.xtext.openqasm.OpenQASM3.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_RPAREN_3=RULE_RPAREN
		{
			newLeafNode(this_RPAREN_3, grammarAccess.getIfStatementAccess().getRPARENTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getIf_bodyStatementOrScopeParserRuleCall_4_0());
				}
				lv_if_body_4_0=rulestatementOrScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"if_body",
						lv_if_body_4_0,
						"org.xtext.openqasm.OpenQASM3.statementOrScope");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestatementOrScope
entryRulestatementOrScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementOrScopeRule()); }
	iv_rulestatementOrScope=rulestatementOrScope
	{ $current=$iv_rulestatementOrScope.current; }
	EOF;

// Rule statementOrScope
rulestatementOrScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementOrScopeAccess().getStatementParserRuleCall_0());
		}
		this_Statement_0=ruleStatement
		{
			$current = $this_Statement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementOrScopeAccess().getScopeParserRuleCall_1());
		}
		this_Scope_1=ruleScope
		{
			$current = $this_Scope_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScopeRule()); }
	iv_ruleScope=ruleScope
	{ $current=$iv_ruleScope.current; }
	EOF;

// Rule Scope
ruleScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getScopeAccess().getScopeAction_0(),
					$current);
			}
		)
		this_LBRACE_1=RULE_LBRACE
		{
			newLeafNode(this_LBRACE_1, grammarAccess.getScopeAccess().getLBRACETerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScopeAccess().getStatementsStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScopeRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"org.xtext.openqasm.OpenQASM3.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_RBRACE_3=RULE_RBRACE
		{
			newLeafNode(this_RBRACE_3, grammarAccess.getScopeAccess().getRBRACETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	iv_ruleExpressionList=ruleExpressionList
	{ $current=$iv_ruleExpressionList.current; }
	EOF;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionListAccess().getE1ExpressionParserRuleCall_0_0());
				}
				lv_e1_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionListRule());
					}
					set(
						$current,
						"e1",
						lv_e1_0_0,
						"org.xtext.openqasm.OpenQASM3.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_COMMA_1=RULE_COMMA
			{
				newLeafNode(this_COMMA_1, grammarAccess.getExpressionListAccess().getCOMMATerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionListAccess().getE2ExpressionParserRuleCall_1_1_0());
					}
					lv_e2_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionListRule());
						}
						add(
							$current,
							"e2",
							lv_e2_2_0,
							"org.xtext.openqasm.OpenQASM3.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			this_COMMA_3=RULE_COMMA
			{
				newLeafNode(this_COMMA_3, grammarAccess.getExpressionListAccess().getCOMMATerminalRuleCall_2());
			}
		)?
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_LPAREN_0=RULE_LPAREN
			{
				newLeafNode(this_LPAREN_0, grammarAccess.getExpressionAccess().getLPARENTerminalRuleCall_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExprsExpressionParserRuleCall_0_1_0());
					}
					lv_exprs_1_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"exprs",
							lv_exprs_1_0,
							"org.xtext.openqasm.OpenQASM3.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			this_RPAREN_2=RULE_RPAREN
			{
				newLeafNode(this_RPAREN_2, grammarAccess.getExpressionAccess().getRPARENTerminalRuleCall_0_2());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getLtrsLiteralParserRuleCall_1_0());
				}
				lv_ltrs_3_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"ltrs",
						lv_ltrs_3_0,
						"org.xtext.openqasm.OpenQASM3.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getUnExpressionsUnaryExpressionParserRuleCall_2_0());
				}
				lv_unExpressions_4_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"unExpressions",
						lv_unExpressions_4_0,
						"org.xtext.openqasm.OpenQASM3.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getMultExpressionsMultiplicativeExpressionParserRuleCall_3_0());
				}
				lv_multExpressions_5_0=ruleMultiplicativeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"multExpressions",
						lv_multExpressions_5_0,
						"org.xtext.openqasm.OpenQASM3.MultiplicativeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getLFloatLiteralParserRuleCall_0_0());
				}
				lv_l_0_0=ruleFloatLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"org.xtext.openqasm.OpenQASM3.FloatLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralAccess().getLiteralAction_1_0(),
						$current);
				}
			)
			this_STRING_2=RULE_STRING
			{
				newLeafNode(this_STRING_2, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralAccess().getLiteralAction_2_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getLiteralAccess().getDecimalIntegerLiteralParserRuleCall_2_1());
			}
			ruleDecimalIntegerLiteral
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getL1LiteralParserRuleCall_0_0());
				}
				lv_l1_0_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
					}
					add(
						$current,
						"l1",
						lv_l1_0_0,
						"org.xtext.openqasm.OpenQASM3.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeOperatorParserRuleCall_1());
		}
		ruleMultiplicativeOperator
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getL1LiteralParserRuleCall_2_0());
				}
				lv_l1_2_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
					}
					add(
						$current,
						"l1",
						lv_l1_2_0,
						"org.xtext.openqasm.OpenQASM3.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeOperatorParserRuleCall_3_0());
			}
			ruleMultiplicativeOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getL1LiteralParserRuleCall_3_1_0());
					}
					lv_l1_4_0=ruleLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						add(
							$current,
							"l1",
							lv_l1_4_0,
							"org.xtext.openqasm.OpenQASM3.Literal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeOperatorRule()); }
	iv_ruleMultiplicativeOperator=ruleMultiplicativeOperator
	{ $current=$iv_ruleMultiplicativeOperator.current.getText(); }
	EOF;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ASTERISK_0=RULE_ASTERISK
		{
			$current.merge(this_ASTERISK_0);
		}
		{
			newLeafNode(this_ASTERISK_0, grammarAccess.getMultiplicativeOperatorAccess().getASTERISKTerminalRuleCall_0());
		}
		    |
		this_SLASH_1=RULE_SLASH
		{
			$current.merge(this_SLASH_1);
		}
		{
			newLeafNode(this_SLASH_1, grammarAccess.getMultiplicativeOperatorAccess().getSLASHTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleUnaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.xtext.openqasm.OpenQASM3.UnaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getLLiteralParserRuleCall_1_0());
				}
				lv_l_1_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"l",
						lv_l_1_0,
						"org.xtext.openqasm.OpenQASM3.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); }
	iv_ruleUnaryOperator=ruleUnaryOperator
	{ $current=$iv_ruleUnaryOperator.current.getText(); }
	EOF;

// Rule UnaryOperator
ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TILDE_0=RULE_TILDE
		{
			$current.merge(this_TILDE_0);
		}
		{
			newLeafNode(this_TILDE_0, grammarAccess.getUnaryOperatorAccess().getTILDETerminalRuleCall_0());
		}
		    |
		this_EXCLAMATION_POINT_1=RULE_EXCLAMATION_POINT
		{
			$current.merge(this_EXCLAMATION_POINT_1);
		}
		{
			newLeafNode(this_EXCLAMATION_POINT_1, grammarAccess.getUnaryOperatorAccess().getEXCLAMATION_POINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleIndexOperator
entryRuleIndexOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexOperatorRule()); }
	iv_ruleIndexOperator=ruleIndexOperator
	{ $current=$iv_ruleIndexOperator.current; }
	EOF;

// Rule IndexOperator
ruleIndexOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_LBRACKET_0=RULE_LBRACKET
		{
			newLeafNode(this_LBRACKET_0, grammarAccess.getIndexOperatorAccess().getLBRACKETTerminalRuleCall_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getIndexOperatorAccess().getExpressionParserRuleCall_1_0());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			(
				this_COMMA_2=RULE_COMMA
				{
					newLeafNode(this_COMMA_2, grammarAccess.getIndexOperatorAccess().getCOMMATerminalRuleCall_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getIndexOperatorAccess().getEExpressionParserRuleCall_1_1_1_0());
						}
						lv_e_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIndexOperatorRule());
							}
							add(
								$current,
								"e",
								lv_e_3_0,
								"org.xtext.openqasm.OpenQASM3.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				this_COMMA_4=RULE_COMMA
				{
					newLeafNode(this_COMMA_4, grammarAccess.getIndexOperatorAccess().getCOMMATerminalRuleCall_1_2());
				}
			)?
		)
		this_RBRACKET_5=RULE_RBRACKET
		{
			newLeafNode(this_RBRACKET_5, grammarAccess.getIndexOperatorAccess().getRBRACKETTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleIndexedIdentifier
entryRuleIndexedIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexedIdentifierRule()); }
	iv_ruleIndexedIdentifier=ruleIndexedIdentifier
	{ $current=$iv_ruleIndexedIdentifier.current; }
	EOF;

// Rule IndexedIdentifier
ruleIndexedIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_gateName_0_0=RULE_ID
				{
					newLeafNode(lv_gateName_0_0, grammarAccess.getIndexedIdentifierAccess().getGateNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIndexedIdentifierRule());
					}
					setWithLastConsumed(
						$current,
						"gateName",
						lv_gateName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexedIdentifierAccess().getIoIndexOperatorParserRuleCall_1_0());
				}
				lv_io_1_0=ruleIndexOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexedIdentifierRule());
					}
					add(
						$current,
						"io",
						lv_io_1_0,
						"org.xtext.openqasm.OpenQASM3.IndexOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleGateOperand
entryRuleGateOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGateOperandRule()); }
	iv_ruleGateOperand=ruleGateOperand
	{ $current=$iv_ruleGateOperand.current; }
	EOF;

// Rule GateOperand
ruleGateOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getGateOperandAccess().getIndexedIdentifierParserRuleCall());
	}
	this_IndexedIdentifier_0=ruleIndexedIdentifier
	{
		$current = $this_IndexedIdentifier_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleGateOperandList
entryRuleGateOperandList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGateOperandListRule()); }
	iv_ruleGateOperandList=ruleGateOperandList
	{ $current=$iv_ruleGateOperandList.current; }
	EOF;

// Rule GateOperandList
ruleGateOperandList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGateOperandListAccess().getGateOperandParserRuleCall_0());
		}
		this_GateOperand_0=ruleGateOperand
		{
			$current = $this_GateOperand_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			this_COMMA_1=RULE_COMMA
			{
				newLeafNode(this_COMMA_1, grammarAccess.getGateOperandListAccess().getCOMMATerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGateOperandListAccess().getExtraGOGateOperandParserRuleCall_1_1_0());
					}
					lv_extraGO_2_0=ruleGateOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGateOperandListRule());
						}
						add(
							$current,
							"extraGO",
							lv_extraGO_2_0,
							"org.xtext.openqasm.OpenQASM3.GateOperand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			this_COMMA_3=RULE_COMMA
			{
				newLeafNode(this_COMMA_3, grammarAccess.getGateOperandListAccess().getCOMMATerminalRuleCall_2());
			}
		)?
	)
;

// Entry rule entryRuleQubitType
entryRuleQubitType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQubitTypeRule()); }
	iv_ruleQubitType=ruleQubitType
	{ $current=$iv_ruleQubitType.current; }
	EOF;

// Rule QubitType
ruleQubitType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_QUBIT_0=RULE_QUBIT
		{
			newLeafNode(this_QUBIT_0, grammarAccess.getQubitTypeAccess().getQUBITTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQubitTypeAccess().getDDesignatorParserRuleCall_1_0());
				}
				lv_d_1_0=ruleDesignator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQubitTypeRule());
					}
					set(
						$current,
						"d",
						lv_d_1_0,
						"org.xtext.openqasm.OpenQASM3.Designator");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDesignator
entryRuleDesignator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDesignatorRule()); }
	iv_ruleDesignator=ruleDesignator
	{ $current=$iv_ruleDesignator.current; }
	EOF;

// Rule Designator
ruleDesignator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDesignatorAccess().getDesignatorAction_0(),
					$current);
			}
		)
		this_LBRACKET_1=RULE_LBRACKET
		{
			newLeafNode(this_LBRACKET_1, grammarAccess.getDesignatorAccess().getLBRACKETTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDesignatorAccess().getEExpressionParserRuleCall_2_0());
				}
				lv_e_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDesignatorRule());
					}
					set(
						$current,
						"e",
						lv_e_2_0,
						"org.xtext.openqasm.OpenQASM3.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		this_RBRACKET_3=RULE_RBRACKET
		{
			newLeafNode(this_RBRACKET_3, grammarAccess.getDesignatorAccess().getRBRACKETTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	iv_ruleFloatLiteral=ruleFloatLiteral
	{ $current=$iv_ruleFloatLiteral.current.getText(); }
	EOF;

// Rule FloatLiteral
ruleFloatLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_0());
			}
			this_DecimalIntegerLiteral_0=ruleDecimalIntegerLiteral
			{
				$current.merge(this_DecimalIntegerLiteral_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_DOT_1=RULE_DOT
			{
				$current.merge(this_DOT_1);
			}
			{
				newLeafNode(this_DOT_1, grammarAccess.getFloatLiteralAccess().getDOTTerminalRuleCall_0_1());
			}
			(
				{
					newCompositeNode(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_2());
				}
				this_DecimalIntegerLiteral_2=ruleDecimalIntegerLiteral
				{
					$current.merge(this_DecimalIntegerLiteral_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			(
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getFloatLiteralAccess().getEKeyword_0_3_0());
				}
				{
					newCompositeNode(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_3_1());
				}
				this_DecimalIntegerLiteral_4=ruleDecimalIntegerLiteral
				{
					$current.merge(this_DecimalIntegerLiteral_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
				(
					this_DOT_5=RULE_DOT
					{
						$current.merge(this_DOT_5);
					}
					{
						newLeafNode(this_DOT_5, grammarAccess.getFloatLiteralAccess().getDOTTerminalRuleCall_0_3_2_0());
					}
					{
						newCompositeNode(grammarAccess.getFloatLiteralAccess().getDecimalIntegerLiteralParserRuleCall_0_3_2_1());
					}
					this_DecimalIntegerLiteral_6=ruleDecimalIntegerLiteral
					{
						$current.merge(this_DecimalIntegerLiteral_6);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)?
		)
		    |
		kw='pi'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatLiteralAccess().getPiKeyword_1());
		}
	)
;

// Entry rule entryRuleDecimalIntegerLiteral
entryRuleDecimalIntegerLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDecimalIntegerLiteralRule()); }
	iv_ruleDecimalIntegerLiteral=ruleDecimalIntegerLiteral
	{ $current=$iv_ruleDecimalIntegerLiteral.current.getText(); }
	EOF;

// Rule DecimalIntegerLiteral
ruleDecimalIntegerLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_MINUS_0=RULE_MINUS
			{
				$current.merge(this_MINUS_0);
			}
			{
				newLeafNode(this_MINUS_0, grammarAccess.getDecimalIntegerLiteralAccess().getMINUSTerminalRuleCall_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getDecimalIntegerLiteralAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleIncludeStatement
entryRuleIncludeStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncludeStatementRule()); }
	iv_ruleIncludeStatement=ruleIncludeStatement
	{ $current=$iv_ruleIncludeStatement.current; }
	EOF;

// Rule IncludeStatement
ruleIncludeStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='include'
		{
			newLeafNode(otherlv_0, grammarAccess.getIncludeStatementAccess().getIncludeKeyword_0());
		}
		(
			(
				lv_libName_1_0=RULE_STRING
				{
					newLeafNode(lv_libName_1_0, grammarAccess.getIncludeStatementAccess().getLibNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIncludeStatementRule());
					}
					setWithLastConsumed(
						$current,
						"libName",
						lv_libName_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		this_SEMICOLON_2=RULE_SEMICOLON
		{
			newLeafNode(this_SEMICOLON_2, grammarAccess.getIncludeStatementAccess().getSEMICOLONTerminalRuleCall_2());
		}
	)
;

RULE_ELSE : 'else';

RULE_MINUS : '-';

RULE_EXCLAMATION_POINT : '!';

RULE_TILDE : '~';

RULE_PERCENT : '%';

RULE_SLASH : '/';

RULE_ASTERISK : '*';

RULE_DOT : '.';

RULE_COMMA : ',';

RULE_BIT : 'bit';

RULE_FLOAT : 'float';

RULE_ANGLE : 'angle';

RULE_BOOL : 'bool';

RULE_DURATION : 'duration';

RULE_STRETCH : 'stretch';

RULE_COMPLEX : 'complex';

RULE_ARRAY : 'array';

RULE_QUBIT : 'qubit';

RULE_LBRACKET : '[';

RULE_RBRACKET : ']';

RULE_SEMICOLON : ';';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_LBRACE : '{';

RULE_RBRACE : '}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
