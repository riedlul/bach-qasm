/**
 * generated by Xtext 2.30.0
 */
package org.xtext.openqasm.openQASM3.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.openqasm.openQASM3.ExpressionList;
import org.xtext.openqasm.openQASM3.GateCallStatement;
import org.xtext.openqasm.openQASM3.GateOperandList;
import org.xtext.openqasm.openQASM3.OpenQASM3Package;
import org.xtext.openqasm.openQASM3.Scope;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gate Call Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.openqasm.openQASM3.impl.GateCallStatementImpl#getGate <em>Gate</em>}</li>
 *   <li>{@link org.xtext.openqasm.openQASM3.impl.GateCallStatementImpl#getEl <em>El</em>}</li>
 *   <li>{@link org.xtext.openqasm.openQASM3.impl.GateCallStatementImpl#getGateList <em>Gate List</em>}</li>
 *   <li>{@link org.xtext.openqasm.openQASM3.impl.GateCallStatementImpl#getScope <em>Scope</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GateCallStatementImpl extends StatementImpl implements GateCallStatement
{
  /**
   * The default value of the '{@link #getGate() <em>Gate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGate()
   * @generated
   * @ordered
   */
  protected static final String GATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGate() <em>Gate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGate()
   * @generated
   * @ordered
   */
  protected String gate = GATE_EDEFAULT;

  /**
   * The cached value of the '{@link #getEl() <em>El</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEl()
   * @generated
   * @ordered
   */
  protected ExpressionList el;

  /**
   * The cached value of the '{@link #getGateList() <em>Gate List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateList()
   * @generated
   * @ordered
   */
  protected GateOperandList gateList;

  /**
   * The cached value of the '{@link #getScope() <em>Scope</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScope()
   * @generated
   * @ordered
   */
  protected Scope scope;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GateCallStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenQASM3Package.Literals.GATE_CALL_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGate()
  {
    return gate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGate(String newGate)
  {
    String oldGate = gate;
    gate = newGate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenQASM3Package.GATE_CALL_STATEMENT__GATE, oldGate, gate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionList getEl()
  {
    return el;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEl(ExpressionList newEl, NotificationChain msgs)
  {
    ExpressionList oldEl = el;
    el = newEl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenQASM3Package.GATE_CALL_STATEMENT__EL, oldEl, newEl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEl(ExpressionList newEl)
  {
    if (newEl != el)
    {
      NotificationChain msgs = null;
      if (el != null)
        msgs = ((InternalEObject)el).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenQASM3Package.GATE_CALL_STATEMENT__EL, null, msgs);
      if (newEl != null)
        msgs = ((InternalEObject)newEl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenQASM3Package.GATE_CALL_STATEMENT__EL, null, msgs);
      msgs = basicSetEl(newEl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenQASM3Package.GATE_CALL_STATEMENT__EL, newEl, newEl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GateOperandList getGateList()
  {
    return gateList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGateList(GateOperandList newGateList, NotificationChain msgs)
  {
    GateOperandList oldGateList = gateList;
    gateList = newGateList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenQASM3Package.GATE_CALL_STATEMENT__GATE_LIST, oldGateList, newGateList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGateList(GateOperandList newGateList)
  {
    if (newGateList != gateList)
    {
      NotificationChain msgs = null;
      if (gateList != null)
        msgs = ((InternalEObject)gateList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenQASM3Package.GATE_CALL_STATEMENT__GATE_LIST, null, msgs);
      if (newGateList != null)
        msgs = ((InternalEObject)newGateList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenQASM3Package.GATE_CALL_STATEMENT__GATE_LIST, null, msgs);
      msgs = basicSetGateList(newGateList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenQASM3Package.GATE_CALL_STATEMENT__GATE_LIST, newGateList, newGateList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scope getScope()
  {
    return scope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetScope(Scope newScope, NotificationChain msgs)
  {
    Scope oldScope = scope;
    scope = newScope;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OpenQASM3Package.GATE_CALL_STATEMENT__SCOPE, oldScope, newScope);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScope(Scope newScope)
  {
    if (newScope != scope)
    {
      NotificationChain msgs = null;
      if (scope != null)
        msgs = ((InternalEObject)scope).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OpenQASM3Package.GATE_CALL_STATEMENT__SCOPE, null, msgs);
      if (newScope != null)
        msgs = ((InternalEObject)newScope).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OpenQASM3Package.GATE_CALL_STATEMENT__SCOPE, null, msgs);
      msgs = basicSetScope(newScope, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OpenQASM3Package.GATE_CALL_STATEMENT__SCOPE, newScope, newScope));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenQASM3Package.GATE_CALL_STATEMENT__EL:
        return basicSetEl(null, msgs);
      case OpenQASM3Package.GATE_CALL_STATEMENT__GATE_LIST:
        return basicSetGateList(null, msgs);
      case OpenQASM3Package.GATE_CALL_STATEMENT__SCOPE:
        return basicSetScope(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenQASM3Package.GATE_CALL_STATEMENT__GATE:
        return getGate();
      case OpenQASM3Package.GATE_CALL_STATEMENT__EL:
        return getEl();
      case OpenQASM3Package.GATE_CALL_STATEMENT__GATE_LIST:
        return getGateList();
      case OpenQASM3Package.GATE_CALL_STATEMENT__SCOPE:
        return getScope();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenQASM3Package.GATE_CALL_STATEMENT__GATE:
        setGate((String)newValue);
        return;
      case OpenQASM3Package.GATE_CALL_STATEMENT__EL:
        setEl((ExpressionList)newValue);
        return;
      case OpenQASM3Package.GATE_CALL_STATEMENT__GATE_LIST:
        setGateList((GateOperandList)newValue);
        return;
      case OpenQASM3Package.GATE_CALL_STATEMENT__SCOPE:
        setScope((Scope)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenQASM3Package.GATE_CALL_STATEMENT__GATE:
        setGate(GATE_EDEFAULT);
        return;
      case OpenQASM3Package.GATE_CALL_STATEMENT__EL:
        setEl((ExpressionList)null);
        return;
      case OpenQASM3Package.GATE_CALL_STATEMENT__GATE_LIST:
        setGateList((GateOperandList)null);
        return;
      case OpenQASM3Package.GATE_CALL_STATEMENT__SCOPE:
        setScope((Scope)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenQASM3Package.GATE_CALL_STATEMENT__GATE:
        return GATE_EDEFAULT == null ? gate != null : !GATE_EDEFAULT.equals(gate);
      case OpenQASM3Package.GATE_CALL_STATEMENT__EL:
        return el != null;
      case OpenQASM3Package.GATE_CALL_STATEMENT__GATE_LIST:
        return gateList != null;
      case OpenQASM3Package.GATE_CALL_STATEMENT__SCOPE:
        return scope != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (gate: ");
    result.append(gate);
    result.append(')');
    return result.toString();
  }

} //GateCallStatementImpl
