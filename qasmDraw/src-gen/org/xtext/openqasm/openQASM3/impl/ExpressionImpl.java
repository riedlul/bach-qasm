/**
 * generated by Xtext 2.30.0
 */
package org.xtext.openqasm.openQASM3.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.openqasm.openQASM3.Expression;
import org.xtext.openqasm.openQASM3.Literal;
import org.xtext.openqasm.openQASM3.MultiplicativeExpression;
import org.xtext.openqasm.openQASM3.OpenQASM3Package;
import org.xtext.openqasm.openQASM3.UnaryExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.openqasm.openQASM3.impl.ExpressionImpl#getExprs <em>Exprs</em>}</li>
 *   <li>{@link org.xtext.openqasm.openQASM3.impl.ExpressionImpl#getLtrs <em>Ltrs</em>}</li>
 *   <li>{@link org.xtext.openqasm.openQASM3.impl.ExpressionImpl#getUnExpressions <em>Un Expressions</em>}</li>
 *   <li>{@link org.xtext.openqasm.openQASM3.impl.ExpressionImpl#getMultExpressions <em>Mult Expressions</em>}</li>
 *   <li>{@link org.xtext.openqasm.openQASM3.impl.ExpressionImpl#getE <em>E</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends IndexOperatorImpl implements Expression
{
  /**
   * The cached value of the '{@link #getExprs() <em>Exprs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprs()
   * @generated
   * @ordered
   */
  protected EList<Expression> exprs;

  /**
   * The cached value of the '{@link #getLtrs() <em>Ltrs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLtrs()
   * @generated
   * @ordered
   */
  protected EList<Literal> ltrs;

  /**
   * The cached value of the '{@link #getUnExpressions() <em>Un Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnExpressions()
   * @generated
   * @ordered
   */
  protected EList<UnaryExpression> unExpressions;

  /**
   * The cached value of the '{@link #getMultExpressions() <em>Mult Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultExpressions()
   * @generated
   * @ordered
   */
  protected EList<MultiplicativeExpression> multExpressions;

  /**
   * The cached value of the '{@link #getE() <em>E</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getE()
   * @generated
   * @ordered
   */
  protected EList<Expression> e;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OpenQASM3Package.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getExprs()
  {
    if (exprs == null)
    {
      exprs = new EObjectContainmentEList<Expression>(Expression.class, this, OpenQASM3Package.EXPRESSION__EXPRS);
    }
    return exprs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Literal> getLtrs()
  {
    if (ltrs == null)
    {
      ltrs = new EObjectContainmentEList<Literal>(Literal.class, this, OpenQASM3Package.EXPRESSION__LTRS);
    }
    return ltrs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UnaryExpression> getUnExpressions()
  {
    if (unExpressions == null)
    {
      unExpressions = new EObjectContainmentEList<UnaryExpression>(UnaryExpression.class, this, OpenQASM3Package.EXPRESSION__UN_EXPRESSIONS);
    }
    return unExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MultiplicativeExpression> getMultExpressions()
  {
    if (multExpressions == null)
    {
      multExpressions = new EObjectContainmentEList<MultiplicativeExpression>(MultiplicativeExpression.class, this, OpenQASM3Package.EXPRESSION__MULT_EXPRESSIONS);
    }
    return multExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getE()
  {
    if (e == null)
    {
      e = new EObjectContainmentEList<Expression>(Expression.class, this, OpenQASM3Package.EXPRESSION__E);
    }
    return e;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OpenQASM3Package.EXPRESSION__EXPRS:
        return ((InternalEList<?>)getExprs()).basicRemove(otherEnd, msgs);
      case OpenQASM3Package.EXPRESSION__LTRS:
        return ((InternalEList<?>)getLtrs()).basicRemove(otherEnd, msgs);
      case OpenQASM3Package.EXPRESSION__UN_EXPRESSIONS:
        return ((InternalEList<?>)getUnExpressions()).basicRemove(otherEnd, msgs);
      case OpenQASM3Package.EXPRESSION__MULT_EXPRESSIONS:
        return ((InternalEList<?>)getMultExpressions()).basicRemove(otherEnd, msgs);
      case OpenQASM3Package.EXPRESSION__E:
        return ((InternalEList<?>)getE()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OpenQASM3Package.EXPRESSION__EXPRS:
        return getExprs();
      case OpenQASM3Package.EXPRESSION__LTRS:
        return getLtrs();
      case OpenQASM3Package.EXPRESSION__UN_EXPRESSIONS:
        return getUnExpressions();
      case OpenQASM3Package.EXPRESSION__MULT_EXPRESSIONS:
        return getMultExpressions();
      case OpenQASM3Package.EXPRESSION__E:
        return getE();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OpenQASM3Package.EXPRESSION__EXPRS:
        getExprs().clear();
        getExprs().addAll((Collection<? extends Expression>)newValue);
        return;
      case OpenQASM3Package.EXPRESSION__LTRS:
        getLtrs().clear();
        getLtrs().addAll((Collection<? extends Literal>)newValue);
        return;
      case OpenQASM3Package.EXPRESSION__UN_EXPRESSIONS:
        getUnExpressions().clear();
        getUnExpressions().addAll((Collection<? extends UnaryExpression>)newValue);
        return;
      case OpenQASM3Package.EXPRESSION__MULT_EXPRESSIONS:
        getMultExpressions().clear();
        getMultExpressions().addAll((Collection<? extends MultiplicativeExpression>)newValue);
        return;
      case OpenQASM3Package.EXPRESSION__E:
        getE().clear();
        getE().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OpenQASM3Package.EXPRESSION__EXPRS:
        getExprs().clear();
        return;
      case OpenQASM3Package.EXPRESSION__LTRS:
        getLtrs().clear();
        return;
      case OpenQASM3Package.EXPRESSION__UN_EXPRESSIONS:
        getUnExpressions().clear();
        return;
      case OpenQASM3Package.EXPRESSION__MULT_EXPRESSIONS:
        getMultExpressions().clear();
        return;
      case OpenQASM3Package.EXPRESSION__E:
        getE().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OpenQASM3Package.EXPRESSION__EXPRS:
        return exprs != null && !exprs.isEmpty();
      case OpenQASM3Package.EXPRESSION__LTRS:
        return ltrs != null && !ltrs.isEmpty();
      case OpenQASM3Package.EXPRESSION__UN_EXPRESSIONS:
        return unExpressions != null && !unExpressions.isEmpty();
      case OpenQASM3Package.EXPRESSION__MULT_EXPRESSIONS:
        return multExpressions != null && !multExpressions.isEmpty();
      case OpenQASM3Package.EXPRESSION__E:
        return e != null && !e.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
