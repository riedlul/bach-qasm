/*
 * generated by Xtext 2.30.0
 */
package org.xtext.openqasm.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.openqasm.services.OpenQASM3GrammarAccess;

@SuppressWarnings("all")
public class OpenQASM3SyntacticSequencer extends AbstractSyntacticSequencer {

	protected OpenQASM3GrammarAccess grammarAccess;
	protected AbstractElementAlias match_ExpressionList_COMMATerminalRuleCall_2_q;
	protected AbstractElementAlias match_GateCallStatement_GateKeyword_0_q;
	protected AbstractElementAlias match_GateCallStatement___LPARENTerminalRuleCall_2_0_RPARENTerminalRuleCall_2_2__q;
	protected AbstractElementAlias match_GateOperandList_COMMATerminalRuleCall_2_q;
	protected AbstractElementAlias match_IndexOperator_COMMATerminalRuleCall_1_2_q;
	protected AbstractElementAlias match_Literal_DecimalIntegerLiteralParserRuleCall_2_1_or_STRINGTerminalRuleCall_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (OpenQASM3GrammarAccess) access;
		match_ExpressionList_COMMATerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getExpressionListAccess().getCOMMATerminalRuleCall_2());
		match_GateCallStatement_GateKeyword_0_q = new TokenAlias(false, true, grammarAccess.getGateCallStatementAccess().getGateKeyword_0());
		match_GateCallStatement___LPARENTerminalRuleCall_2_0_RPARENTerminalRuleCall_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getGateCallStatementAccess().getLPARENTerminalRuleCall_2_0()), new TokenAlias(false, false, grammarAccess.getGateCallStatementAccess().getRPARENTerminalRuleCall_2_2()));
		match_GateOperandList_COMMATerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getGateOperandListAccess().getCOMMATerminalRuleCall_2());
		match_IndexOperator_COMMATerminalRuleCall_1_2_q = new TokenAlias(false, true, grammarAccess.getIndexOperatorAccess().getCOMMATerminalRuleCall_1_2());
		match_Literal_DecimalIntegerLiteralParserRuleCall_2_1_or_STRINGTerminalRuleCall_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLiteralAccess().getDecimalIntegerLiteralParserRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDecimalIntegerLiteralRule())
			return getDecimalIntegerLiteralToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLBRACERule())
			return getLBRACEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLBRACKETRule())
			return getLBRACKETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLPARENRule())
			return getLPARENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMultiplicativeOperatorRule())
			return getMultiplicativeOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getQUBITRule())
			return getQUBITToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRBRACERule())
			return getRBRACEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRBRACKETRule())
			return getRBRACKETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRPARENRule())
			return getRPARENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEMICOLONRule())
			return getSEMICOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COMMA:	',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * DecimalIntegerLiteral:
	 *     (MINUS)? INT
	 * ;
	 */
	protected String getDecimalIntegerLiteralToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal LBRACE: '{';
	 */
	protected String getLBRACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "{";
	}
	
	/**
	 * terminal LBRACKET: '[';
	 */
	protected String getLBRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[";
	}
	
	/**
	 * terminal LPAREN: '(';
	 */
	protected String getLPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * MultiplicativeOperator:
	 * 	ASTERISK | SLASH
	 * ;
	 */
	protected String getMultiplicativeOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "*";
	}
	
	/**
	 * terminal QUBIT: 'qubit';
	 */
	protected String getQUBITToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "qubit";
	}
	
	/**
	 * terminal RBRACE: '}';
	 */
	protected String getRBRACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "}";
	}
	
	/**
	 * terminal RBRACKET: ']';
	 */
	protected String getRBRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "]";
	}
	
	/**
	 * terminal RPAREN: ')';
	 */
	protected String getRPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal SEMICOLON: ';';
	 */
	protected String getSEMICOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ExpressionList_COMMATerminalRuleCall_2_q.equals(syntax))
				emit_ExpressionList_COMMATerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GateCallStatement_GateKeyword_0_q.equals(syntax))
				emit_GateCallStatement_GateKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GateCallStatement___LPARENTerminalRuleCall_2_0_RPARENTerminalRuleCall_2_2__q.equals(syntax))
				emit_GateCallStatement___LPARENTerminalRuleCall_2_0_RPARENTerminalRuleCall_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GateOperandList_COMMATerminalRuleCall_2_q.equals(syntax))
				emit_GateOperandList_COMMATerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IndexOperator_COMMATerminalRuleCall_1_2_q.equals(syntax))
				emit_IndexOperator_COMMATerminalRuleCall_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Literal_DecimalIntegerLiteralParserRuleCall_2_1_or_STRINGTerminalRuleCall_1_1.equals(syntax))
				emit_Literal_DecimalIntegerLiteralParserRuleCall_2_1_or_STRINGTerminalRuleCall_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     COMMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     e1=Expression (ambiguity) (rule end)
	 *     e2+=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ExpressionList_COMMATerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'gate'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) gate=ID
	 
	 * </pre>
	 */
	protected void emit_GateCallStatement_GateKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (LPAREN RPAREN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     gate=ID (ambiguity) gateList=GateOperandList
	 
	 * </pre>
	 */
	protected void emit_GateCallStatement___LPARENTerminalRuleCall_2_0_RPARENTerminalRuleCall_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     COMMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     extraGO+=GateOperand (ambiguity) (rule end)
	 *     gateName=ID (ambiguity) (rule end)
	 *     io+=IndexOperator (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_GateOperandList_COMMATerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     COMMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     e+=Expression (ambiguity) RBRACKET (rule end)
	 *     exprs+=Expression RPAREN (ambiguity) RBRACKET (rule end)
	 *     ltrs+=Literal (ambiguity) RBRACKET (rule end)
	 *     multExpressions+=MultiplicativeExpression (ambiguity) RBRACKET (rule end)
	 *     unExpressions+=UnaryExpression (ambiguity) RBRACKET (rule end)
	 
	 * </pre>
	 */
	protected void emit_IndexOperator_COMMATerminalRuleCall_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     STRING | DecimalIntegerLiteral
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Literal_DecimalIntegerLiteralParserRuleCall_2_1_or_STRINGTerminalRuleCall_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
